// Code generated by counterfeiter. DO NOT EDIT.
package generatorfakes

import (
	sync "sync"

	generator "github.com/williammartin/gomg/schema/generator"
	jsonschema "github.com/williammartin/jsonschema"
)

type FakeReflector struct {
	ReflectStub        func(interface{}) *jsonschema.Schema
	reflectMutex       sync.RWMutex
	reflectArgsForCall []struct {
		arg1 interface{}
	}
	reflectReturns struct {
		result1 *jsonschema.Schema
	}
	reflectReturnsOnCall map[int]struct {
		result1 *jsonschema.Schema
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReflector) Reflect(arg1 interface{}) *jsonschema.Schema {
	fake.reflectMutex.Lock()
	ret, specificReturn := fake.reflectReturnsOnCall[len(fake.reflectArgsForCall)]
	fake.reflectArgsForCall = append(fake.reflectArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Reflect", []interface{}{arg1})
	fake.reflectMutex.Unlock()
	if fake.ReflectStub != nil {
		return fake.ReflectStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reflectReturns
	return fakeReturns.result1
}

func (fake *FakeReflector) ReflectCallCount() int {
	fake.reflectMutex.RLock()
	defer fake.reflectMutex.RUnlock()
	return len(fake.reflectArgsForCall)
}

func (fake *FakeReflector) ReflectCalls(stub func(interface{}) *jsonschema.Schema) {
	fake.reflectMutex.Lock()
	defer fake.reflectMutex.Unlock()
	fake.ReflectStub = stub
}

func (fake *FakeReflector) ReflectArgsForCall(i int) interface{} {
	fake.reflectMutex.RLock()
	defer fake.reflectMutex.RUnlock()
	argsForCall := fake.reflectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReflector) ReflectReturns(result1 *jsonschema.Schema) {
	fake.reflectMutex.Lock()
	defer fake.reflectMutex.Unlock()
	fake.ReflectStub = nil
	fake.reflectReturns = struct {
		result1 *jsonschema.Schema
	}{result1}
}

func (fake *FakeReflector) ReflectReturnsOnCall(i int, result1 *jsonschema.Schema) {
	fake.reflectMutex.Lock()
	defer fake.reflectMutex.Unlock()
	fake.ReflectStub = nil
	if fake.reflectReturnsOnCall == nil {
		fake.reflectReturnsOnCall = make(map[int]struct {
			result1 *jsonschema.Schema
		})
	}
	fake.reflectReturnsOnCall[i] = struct {
		result1 *jsonschema.Schema
	}{result1}
}

func (fake *FakeReflector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reflectMutex.RLock()
	defer fake.reflectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReflector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ generator.Reflector = new(FakeReflector)
